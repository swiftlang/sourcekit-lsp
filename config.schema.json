{
  "$comment" : "DO NOT EDIT THIS FILE. This file is generated by ConfigSchemaGen/ConfigSchemaGen.swift.",
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "properties" : {
    "backgroundIndexing" : {
      "description" : "Whether background indexing is enabled.",
      "markdownDescription" : "Whether background indexing is enabled.",
      "type" : "boolean"
    },
    "backgroundPreparationMode" : {
      "description" : "Determines how background indexing should prepare a target.",
      "enum" : [
        "build",
        "noLazy",
        "enabled"
      ],
      "markdownDescription" : "Determines how background indexing should prepare a target.",
      "markdownEnumDescriptions" : [
        "Build a target to prepare it.",
        "Prepare a target without generating object files but do not do lazy type checking and function body skipping. This uses SwiftPM's `--experimental-prepare-for-indexing-no-lazy` flag.",
        "Prepare a target without generating object files."
      ],
      "type" : "string"
    },
    "buildSettingsTimeout" : {
      "description" : "Number of milliseconds to wait for build settings from the build system before using fallback build settings.",
      "markdownDescription" : "Number of milliseconds to wait for build settings from the build system before using fallback build settings.",
      "type" : "integer"
    },
    "cancelTextDocumentRequestsOnEditAndClose" : {
      "description" : "Whether sending a `textDocument/didChange` or `textDocument/didClose` notification for a document should cancel all pending requests for that document.",
      "markdownDescription" : "Whether sending a `textDocument/didChange` or `textDocument/didClose` notification for a document should cancel all pending requests for that document.",
      "type" : "boolean"
    },
    "clangdOptions" : {
      "description" : "Extra command line arguments passed to `clangd` when launching it.",
      "items" : {
        "type" : "string"
      },
      "markdownDescription" : "Extra command line arguments passed to `clangd` when launching it.",
      "type" : "array"
    },
    "compilationDatabase" : {
      "description" : "Dictionary with the following keys, defining options for workspaces with a compilation database.",
      "markdownDescription" : "Dictionary with the following keys, defining options for workspaces with a compilation database.",
      "properties" : {
        "searchPaths" : {
          "description" : "Additional paths to search for a compilation database, relative to a workspace root.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Additional paths to search for a compilation database, relative to a workspace root.",
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "defaultWorkspaceType" : {
      "description" : "Default workspace type. Overrides workspace type selection logic.",
      "enum" : [
        "buildServer",
        "compilationDatabase",
        "swiftPM"
      ],
      "markdownDescription" : "Default workspace type. Overrides workspace type selection logic.",
      "type" : "string"
    },
    "experimentalFeatures" : {
      "description" : "Experimental features that are enabled.",
      "items" : {
        "enum" : [
          "on-type-formatting",
          "structured-logs"
        ],
        "markdownEnumDescriptions" : [
          "Enable support for the `textDocument/onTypeFormatting` request.",
          "Indicate that the client can handle the experimental `structure` field in the `window/logMessage` notification."
        ],
        "type" : "string"
      },
      "markdownDescription" : "Experimental features that are enabled.",
      "type" : "array"
    },
    "fallbackBuildSystem" : {
      "description" : "Dictionary with the following keys, defining options for files that aren't managed by any build system.",
      "markdownDescription" : "Dictionary with the following keys, defining options for files that aren't managed by any build system.",
      "properties" : {
        "cCompilerFlags" : {
          "description" : "Extra arguments passed to the compiler for C files.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Extra arguments passed to the compiler for C files.",
          "type" : "array"
        },
        "cxxCompilerFlags" : {
          "description" : "Extra arguments passed to the compiler for C++ files.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Extra arguments passed to the compiler for C++ files.",
          "type" : "array"
        },
        "sdk" : {
          "description" : "The SDK to use for fallback arguments. Default is to infer the SDK using `xcrun`.",
          "markdownDescription" : "The SDK to use for fallback arguments. Default is to infer the SDK using `xcrun`.",
          "type" : "string"
        },
        "swiftCompilerFlags" : {
          "description" : "Extra arguments passed to the compiler for Swift files.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Extra arguments passed to the compiler for Swift files.",
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "generatedFilesPath" : {
      "description" : "Directory in which generated interfaces and macro expansions should be stored.",
      "markdownDescription" : "Directory in which generated interfaces and macro expansions should be stored.",
      "type" : "string"
    },
    "index" : {
      "description" : "Options related to indexing.",
      "markdownDescription" : "Options related to indexing.",
      "properties" : {
        "indexPrefixMap" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Path remappings for remapping index data for local use.",
          "markdownDescription" : "Path remappings for remapping index data for local use.",
          "type" : "object"
        },
        "updateIndexStoreTimeout" : {
          "description" : "Number of seconds to wait for an update index store task to finish before terminating it.",
          "markdownDescription" : "Number of seconds to wait for an update index store task to finish before terminating it.",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "logging" : {
      "description" : "Options related to logging, changing SourceKit-LSP’s logging behavior on non-Apple platforms. On Apple platforms, logging is done through the [system log](Diagnose%20Bundle.md#Enable%20Extended%20Logging). These options can only be set globally and not per workspace.",
      "markdownDescription" : "Options related to logging, changing SourceKit-LSP’s logging behavior on non-Apple platforms. On Apple platforms, logging is done through the [system log](Diagnose%20Bundle.md#Enable%20Extended%20Logging). These options can only be set globally and not per workspace.",
      "properties" : {
        "inputMirrorDirectory" : {
          "description" : "Write all input received by SourceKit-LSP on stdin to a file in this directory. Useful to record and replay an entire SourceKit-LSP session.",
          "markdownDescription" : "Write all input received by SourceKit-LSP on stdin to a file in this directory. Useful to record and replay an entire SourceKit-LSP session.",
          "type" : "string"
        },
        "level" : {
          "description" : "The level from which one onwards log messages should be written.",
          "enum" : [
            "debug",
            "info",
            "default",
            "error",
            "fault"
          ],
          "markdownDescription" : "The level from which one onwards log messages should be written.",
          "type" : "string"
        },
        "outputMirrorDirectory" : {
          "description" : "Write all data sent from SourceKit-LSP to the client to a file in this directory. Useful to record the raw communication between SourceKit-LSP and the client on a low level.",
          "markdownDescription" : "Write all data sent from SourceKit-LSP to the client to a file in this directory. Useful to record the raw communication between SourceKit-LSP and the client on a low level.",
          "type" : "string"
        },
        "privacyLevel" : {
          "description" : "Whether potentially sensitive information should be redacted. Default is `public`, which redacts potentially sensitive information.",
          "enum" : [
            "public",
            "private",
            "sensitive"
          ],
          "markdownDescription" : "Whether potentially sensitive information should be redacted. Default is `public`, which redacts potentially sensitive information.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "sourcekitd" : {
      "description" : "Options modifying the behavior of sourcekitd.",
      "markdownDescription" : "Options modifying the behavior of sourcekitd.",
      "type" : "object"
    },
    "sourcekitdRequestTimeout" : {
      "description" : "The maximum duration that a sourcekitd request should be allowed to execute before being declared as timed out. In general, editors should cancel requests that they are no longer interested in, but in case editors don't cancel requests, this ensures that a long-running non-cancelled request is not blocking sourcekitd and thus most semantic functionality. In particular, VS Code does not cancel the semantic tokens request, which can cause a long-running AST build that blocks sourcekitd.",
      "markdownDescription" : "The maximum duration that a sourcekitd request should be allowed to execute before being declared as timed out. In general, editors should cancel requests that they are no longer interested in, but in case editors don't cancel requests, this ensures that a long-running non-cancelled request is not blocking sourcekitd and thus most semantic functionality. In particular, VS Code does not cancel the semantic tokens request, which can cause a long-running AST build that blocks sourcekitd.",
      "type" : "number"
    },
    "swiftPM" : {
      "description" : "Options for SwiftPM workspaces.",
      "markdownDescription" : "Options for SwiftPM workspaces.",
      "properties" : {
        "buildToolsSwiftCompilerFlags" : {
          "description" : "Extra arguments passed to the compiler for Swift files or plugins. Equivalent to SwiftPM's `-Xbuild-tools-swiftc` option.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Extra arguments passed to the compiler for Swift files or plugins. Equivalent to SwiftPM's `-Xbuild-tools-swiftc` option.",
          "type" : "array"
        },
        "cCompilerFlags" : {
          "description" : "Extra arguments passed to the compiler for C files. Equivalent to SwiftPM's `-Xcc` option.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Extra arguments passed to the compiler for C files. Equivalent to SwiftPM's `-Xcc` option.",
          "type" : "array"
        },
        "configuration" : {
          "description" : "The configuration to build the project for during background indexing and the configuration whose build folder should be used for Swift modules if background indexing is disabled. Equivalent to SwiftPM's `--configuration` option.",
          "enum" : [
            "debug",
            "release"
          ],
          "markdownDescription" : "The configuration to build the project for during background indexing and the configuration whose build folder should be used for Swift modules if background indexing is disabled. Equivalent to SwiftPM's `--configuration` option.",
          "type" : "string"
        },
        "cxxCompilerFlags" : {
          "description" : "Extra arguments passed to the compiler for C++ files. Equivalent to SwiftPM's `-Xcxx` option.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Extra arguments passed to the compiler for C++ files. Equivalent to SwiftPM's `-Xcxx` option.",
          "type" : "array"
        },
        "disableSandbox" : {
          "description" : "Disables running subprocesses from SwiftPM in a sandbox. Equivalent to SwiftPM's `--disable-sandbox` option. Useful when running `sourcekit-lsp` in a sandbox because nested sandboxes are not supported.",
          "markdownDescription" : "Disables running subprocesses from SwiftPM in a sandbox. Equivalent to SwiftPM's `--disable-sandbox` option. Useful when running `sourcekit-lsp` in a sandbox because nested sandboxes are not supported.",
          "type" : "boolean"
        },
        "linkerFlags" : {
          "description" : "Extra arguments passed to the linker. Equivalent to SwiftPM's `-Xlinker` option.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Extra arguments passed to the linker. Equivalent to SwiftPM's `-Xlinker` option.",
          "type" : "array"
        },
        "scratchPath" : {
          "description" : "Build artifacts directory path. If nil, the build system may choose a default value. This path can be specified as a relative path, which will be interpreted relative to the project root. Equivalent to SwiftPM's `--scratch-path` option.",
          "markdownDescription" : "Build artifacts directory path. If nil, the build system may choose a default value. This path can be specified as a relative path, which will be interpreted relative to the project root. Equivalent to SwiftPM's `--scratch-path` option.",
          "type" : "string"
        },
        "swiftCompilerFlags" : {
          "description" : "Extra arguments passed to the compiler for Swift files. Equivalent to SwiftPM's `-Xswiftc` option.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Extra arguments passed to the compiler for Swift files. Equivalent to SwiftPM's `-Xswiftc` option.",
          "type" : "array"
        },
        "swiftSDK" : {
          "description" : "Equivalent to SwiftPM's `--swift-sdk` option.",
          "markdownDescription" : "Equivalent to SwiftPM's `--swift-sdk` option.",
          "type" : "string"
        },
        "swiftSDKsDirectory" : {
          "description" : "Equivalent to SwiftPM's `--swift-sdks-path` option.",
          "markdownDescription" : "Equivalent to SwiftPM's `--swift-sdks-path` option.",
          "type" : "string"
        },
        "toolsets" : {
          "description" : "Equivalent to SwiftPM's `--toolset` option.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Equivalent to SwiftPM's `--toolset` option.",
          "type" : "array"
        },
        "traits" : {
          "description" : "Traits to enable for the package. Equivalent to SwiftPM's `--traits` option.",
          "items" : {
            "type" : "string"
          },
          "markdownDescription" : "Traits to enable for the package. Equivalent to SwiftPM's `--traits` option.",
          "type" : "array"
        },
        "triple" : {
          "description" : "Equivalent to SwiftPM's `--triple` option.",
          "markdownDescription" : "Equivalent to SwiftPM's `--triple` option.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "swiftPublishDiagnosticsDebounceDuration" : {
      "description" : "The time that `SwiftLanguageService` should wait after an edit before starting to compute diagnostics and sending a `PublishDiagnosticsNotification`.",
      "markdownDescription" : "The time that `SwiftLanguageService` should wait after an edit before starting to compute diagnostics and sending a `PublishDiagnosticsNotification`.",
      "type" : "number"
    },
    "workDoneProgressDebounceDuration" : {
      "description" : "When a task is started that should be displayed to the client as a work done progress, how many milliseconds to wait before actually starting the work done progress. This prevents flickering of the work done progress in the client for short-lived index tasks which end within this duration.",
      "markdownDescription" : "When a task is started that should be displayed to the client as a work done progress, how many milliseconds to wait before actually starting the work done progress. This prevents flickering of the work done progress in the client for short-lived index tasks which end within this duration.",
      "type" : "number"
    }
  },
  "title" : "SourceKit-LSP Configuration",
  "type" : "object"
}