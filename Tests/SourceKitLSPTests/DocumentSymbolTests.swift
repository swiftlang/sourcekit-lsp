//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

@_spi(SourceKitLSP) import LanguageServerProtocol
import SKLogging
import SKTestSupport
import SourceKitLSP
import XCTest

final class DocumentSymbolTests: SourceKitLSPTestCase {
  // MARK: - Tests

  func testEmpty() async throws {
    try await assertDocumentSymbols("") { positions in [] }
  }

  func testUnicode1() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£struct 2Ô∏è‚É£≈ª√≥≈Çƒá3Ô∏è‚É£ { }4Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "≈ª√≥≈Çƒá",
          detail: nil,
          kind: .struct,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testUnicode2() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£struct 2Ô∏è‚É£üç∞3Ô∏è‚É£ { }4Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "üç∞",
          detail: nil,
          kind: .struct,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testEnumCase() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£enum 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        case 4Ô∏è‚É£first5Ô∏è‚É£, 6Ô∏è‚É£second7Ô∏è‚É£
      }8Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          detail: nil,
          kind: .enum,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["8Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "first",
              detail: nil,
              kind: .enumMember,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              children: []
            ),
            DocumentSymbol(
              name: "second",
              detail: nil,
              kind: .enumMember,
              deprecated: nil,
              range: positions["6Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
              selectionRange: positions["6Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
              children: []
            ),
          ]
        )
      ]
    }
  }

  func testEnumCaseWithAssociatedValue() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£enum 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        case 4Ô∏è‚É£first(Int)5Ô∏è‚É£
      }6Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          detail: nil,
          kind: .enum,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "first(_:)",
              detail: nil,
              kind: .enumMember,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testEnumCaseWithNamedAssociatedValue() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£enum 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        case 4Ô∏è‚É£first(someName: Int)5Ô∏è‚É£
      }6Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          detail: nil,
          kind: .enum,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "first(someName:)",
              detail: nil,
              kind: .enumMember,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testExtension() async throws {
    try await assertDocumentSymbols(
      """
      // struct ThisIsCommentedOut { }
      /* struct ThisOneToo { } */
      1Ô∏è‚É£extension 2Ô∏è‚É£Int3Ô∏è‚É£ { }4Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Int",
          detail: nil,
          kind: .namespace,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testStruct() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£struct 2Ô∏è‚É£Struct3Ô∏è‚É£ { }4Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "Struct",
          detail: nil,
          kind: .struct,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testClass() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£class 2Ô∏è‚É£Class3Ô∏è‚É£ { }4Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "Class",
          detail: nil,
          kind: .class,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testEnum() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£enum 2Ô∏è‚É£Enum3Ô∏è‚É£ { case 4Ô∏è‚É£enumMember5Ô∏è‚É£ }6Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "Enum",
          detail: nil,
          kind: .enum,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "enumMember",
              detail: nil,
              kind: .enumMember,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testProtocol() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£protocol 2Ô∏è‚É£Interface3Ô∏è‚É£ { 4Ô∏è‚É£func 5Ô∏è‚É£f()6Ô∏è‚É£ }7Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "Interface",
          detail: nil,
          kind: .interface,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "f()",
              detail: nil,
              kind: .method,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
              selectionRange: positions["5Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testFunction() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£func 2Ô∏è‚É£function()3Ô∏è‚É£ { }4Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "function()",
          detail: nil,
          kind: .function,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testVariable() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£var 2Ô∏è‚É£variable3Ô∏è‚É£ = 04Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "variable",
          detail: nil,
          kind: .variable,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testMultiplePatternsInVariable() async throws {
    try await assertDocumentSymbols("var 1Ô∏è‚É£varA2Ô∏è‚É£: Int,3Ô∏è‚É£ 4Ô∏è‚É£varB5Ô∏è‚É£ = 06Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "varA",
          detail: nil,
          kind: .variable,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          selectionRange: positions["1Ô∏è‚É£"]..<positions["2Ô∏è‚É£"],
          children: []
        ),
        DocumentSymbol(
          name: "varB",
          detail: nil,
          kind: .variable,
          deprecated: nil,
          range: positions["4Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
          selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
          children: []
        ),
      ]
    }
  }

  func testConstant() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£let 2Ô∏è‚É£constant3Ô∏è‚É£ = 04Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "constant",
          detail: nil,
          kind: .variable,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testComputedVariable() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£var 2Ô∏è‚É£computedVariable3Ô∏è‚É£: Int { return 0 }4Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "computedVariable",
          detail: nil,
          kind: .variable,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testOperatorFunc() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£func 2Ô∏è‚É£+(lhs: Struct, rhs: Struct)3Ô∏è‚É£ { }4Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "+(lhs:rhs:)",
          detail: nil,
          kind: .operator,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testPrefixOperatorFunc() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£prefix func 2Ô∏è‚É£-(rhs: Struct)3Ô∏è‚É£ { }4Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "-(rhs:)",
          detail: nil,
          kind: .operator,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testGenericFunc() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£func 2Ô∏è‚É£f<3Ô∏è‚É£TypeParameter4Ô∏è‚É£>(type: TypeParameter.Type)5Ô∏è‚É£ { }6Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "f(type:)",
          detail: nil,
          kind: .function,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "TypeParameter",
              detail: nil,
              kind: .typeParameter,
              deprecated: nil,
              range: positions["3Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
              selectionRange: positions["3Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testGenericStruct() async throws {
    try await assertDocumentSymbols("1Ô∏è‚É£struct 2Ô∏è‚É£S3Ô∏è‚É£<4Ô∏è‚É£TypeParameter5Ô∏è‚É£> { }6Ô∏è‚É£") { positions in
      [
        DocumentSymbol(
          name: "S",
          detail: nil,
          kind: .struct,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "TypeParameter",
              detail: nil,
              kind: .typeParameter,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testClassFunction() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£class 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        4Ô∏è‚É£func 5Ô∏è‚É£method()6Ô∏è‚É£ { }7Ô∏è‚É£
      }8Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          detail: nil,
          kind: .class,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["8Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "method()",
              detail: nil,
              kind: .method,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
              selectionRange: positions["5Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testStaticClassFunction() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£class 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        4Ô∏è‚É£static func 5Ô∏è‚É£staticMethod()6Ô∏è‚É£ { }7Ô∏è‚É£
      }8Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          detail: nil,
          kind: .class,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["8Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "staticMethod()",
              detail: nil,
              kind: .method,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
              selectionRange: positions["5Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testStaticClassProperty() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£class 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        4Ô∏è‚É£var 5Ô∏è‚É£property6Ô∏è‚É£ = 07Ô∏è‚É£
      }8Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          detail: nil,
          kind: .class,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["8Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "property",
              detail: nil,
              kind: .property,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
              selectionRange: positions["5Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testInitializer() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£class 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        4Ô∏è‚É£init()5Ô∏è‚É£ { }6Ô∏è‚É£
      }7Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          detail: nil,
          kind: .class,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "init()",
              detail: nil,
              kind: .constructor,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testInitializerWithParameters() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£class 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        4Ô∏è‚É£init(_ first: Int, second: Int)5Ô∏è‚É£ { }6Ô∏è‚É£
      }7Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          detail: nil,
          kind: .class,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "init(_:second:)",
              detail: nil,
              kind: .constructor,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testLocalVariable() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£func 2Ô∏è‚É£f()3Ô∏è‚É£ {
        let localConstant = 0
      }4Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "f()",
          detail: nil,
          kind: .function,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: []
        )
      ]
    }
  }

  func testLocalFunction() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£func 2Ô∏è‚É£f()3Ô∏è‚É£ {
        4Ô∏è‚É£func 5Ô∏è‚É£localFunction()6Ô∏è‚É£ { }7Ô∏è‚É£
      }8Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "f()",
          detail: nil,
          kind: .function,
          deprecated: nil,
          range: positions["1Ô∏è‚É£"]..<positions["8Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "localFunction()",
              detail: nil,
              kind: .function,
              deprecated: nil,
              range: positions["4Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
              selectionRange: positions["5Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }

  func testIncludeMarkComments() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£// MARK: Marker2Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Marker",
          kind: .namespace,
          range: positions["1Ô∏è‚É£"]..<positions["2Ô∏è‚É£"],
          selectionRange: positions["1Ô∏è‚É£"]..<positions["2Ô∏è‚É£"]
        )
      ]
    }

    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£// MARK: - Marker2Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "- Marker",
          kind: .namespace,
          range: positions["1Ô∏è‚É£"]..<positions["2Ô∏è‚É£"],
          selectionRange: positions["1Ô∏è‚É£"]..<positions["2Ô∏è‚É£"]
        )
      ]
    }

    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£/* MARK: Marker */2Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Marker",
          kind: .namespace,
          range: positions["1Ô∏è‚É£"]..<positions["2Ô∏è‚É£"],
          selectionRange: positions["1Ô∏è‚É£"]..<positions["2Ô∏è‚É£"]
        )
      ]
    }
  }

  func testNestedMarkComment() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£struct 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        4Ô∏è‚É£// MARK: Marker5Ô∏è‚É£
      }6Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          kind: .struct,
          range: positions["1Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "Marker",
              kind: .namespace,
              range: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"]
            )
          ]
        )
      ]
    }
  }

  func testNestedMarkCommentFollowedAttachedToChild() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£struct 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        4Ô∏è‚É£// MARK: Marker5Ô∏è‚É£
        6Ô∏è‚É£func 7Ô∏è‚É£myFunc()8Ô∏è‚É£  { }9Ô∏è‚É£
      }üîü
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          kind: .struct,
          range: positions["1Ô∏è‚É£"]..<positions["üîü"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "Marker",
              kind: .namespace,
              range: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"]
            ),
            DocumentSymbol(
              name: "myFunc()",
              kind: .method,
              range: positions["6Ô∏è‚É£"]..<positions["9Ô∏è‚É£"],
              selectionRange: positions["7Ô∏è‚É£"]..<positions["8Ô∏è‚É£"],
              children: []
            ),
          ]
        )
      ]
    }
  }

  func testShowDeinit() async throws {
    try await assertDocumentSymbols(
      """
      1Ô∏è‚É£class 2Ô∏è‚É£Foo3Ô∏è‚É£ {
        4Ô∏è‚É£deinit5Ô∏è‚É£ {
        }6Ô∏è‚É£
      }7Ô∏è‚É£
      """
    ) { positions in
      [
        DocumentSymbol(
          name: "Foo",
          kind: .class,
          range: positions["1Ô∏è‚É£"]..<positions["7Ô∏è‚É£"],
          selectionRange: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"],
          children: [
            DocumentSymbol(
              name: "deinit",
              kind: .constructor,
              range: positions["4Ô∏è‚É£"]..<positions["6Ô∏è‚É£"],
              selectionRange: positions["4Ô∏è‚É£"]..<positions["5Ô∏è‚É£"],
              children: []
            )
          ]
        )
      ]
    }
  }
}

private func assertDocumentSymbols(
  _ markedText: String,
  _ expectedDocumentSymbols: (DocumentPositions) -> [DocumentSymbol],
  file: StaticString = #filePath,
  line: UInt = #line
) async throws {
  let testClient = try await TestSourceKitLSPClient()
  let uri = DocumentURI(for: .swift)

  let positions = testClient.openDocument(markedText, uri: uri)
  let symbols = try unwrap(try await testClient.send(DocumentSymbolRequest(textDocument: TextDocumentIdentifier(uri))))

  XCTAssertEqual(symbols, .documentSymbols(expectedDocumentSymbols(positions)), file: file, line: line)
}
