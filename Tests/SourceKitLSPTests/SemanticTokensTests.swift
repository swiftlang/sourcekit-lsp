//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2021 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import LanguageServerProtocol
import SKOptions
import SKTestSupport
import SKUtilities
import SourceKitD
@_spi(Testing) import SourceKitLSP
import XCTest

private typealias Token = SyntaxHighlightingToken

final class SemanticTokensTests: XCTestCase {
  func testIntArrayCoding() async throws {
    let tokens = SyntaxHighlightingTokens(tokens: [
      Token(
        start: Position(line: 2, utf16index: 3),
        utf16length: 5,
        kind: .string
      ),
      Token(
        start: Position(line: 4, utf16index: 2),
        utf16length: 1,
        kind: .interface,
        modifiers: [.deprecated, .definition]
      ),
    ])

    let encoded = tokens.lspEncoded
    XCTAssertEqual(
      encoded,
      [
        2,  // line delta
        3,  // char delta
        5,  // length
        SemanticTokenTypes.string.tokenType,  // kind
        0,  // modifiers

        2,  // line delta
        2,  // char delta
        1,  // length
        SemanticTokenTypes.interface.tokenType,  // kind
        SemanticTokenModifiers.deprecated.rawValue | SemanticTokenModifiers.definition.rawValue,  // modifiers
      ]
    )

    let decoded = SyntaxHighlightingTokens(lspEncodedTokens: encoded)
    XCTAssertEqual(decoded.tokens, tokens.tokens)
  }

  func testRangeSplitting() async throws {
    let snapshot = DocumentSnapshot(
      uri: DocumentURI(for: .swift),
      language: .swift,
      version: 0,
      lineTable: LineTable(
        """
        struct X {
          let x: Int
          let y: String


        }
        """
      )
    )

    let empty = Position(line: 0, utf16index: 1)..<Position(line: 0, utf16index: 1)
    XCTAssertEqual(empty.splitToSingleLineRanges(in: snapshot), [])

    let multiLine = Position(line: 1, utf16index: 6)..<Position(line: 2, utf16index: 7)
    XCTAssertEqual(
      multiLine.splitToSingleLineRanges(in: snapshot),
      [
        Position(line: 1, utf16index: 6)..<Position(line: 1, utf16index: 12),
        Position(line: 2, utf16index: 0)..<Position(line: 2, utf16index: 7),
      ]
    )

    let emptyLines = Position(line: 2, utf16index: 14)..<Position(line: 5, utf16index: 1)
    XCTAssertEqual(
      emptyLines.splitToSingleLineRanges(in: snapshot),
      [
        Position(line: 2, utf16index: 14)..<Position(line: 2, utf16index: 15),
        Position(line: 5, utf16index: 0)..<Position(line: 5, utf16index: 1),
      ]
    )
  }

  func testEmpty() async throws {
    try await assertSemanticTokens(
      markedContents: "",
      expected: []
    )
  }

  func testRanged() async throws {
    try await assertSemanticTokens(
      markedContents: """
        let x = 1
        1Ô∏è‚É£let 2Ô∏è‚É£test = 3Ô∏è‚É£20
        4Ô∏è‚É£let 5Ô∏è‚É£a6Ô∏è‚É£bc = 333
        let y = 4
        """,
      range: ("1Ô∏è‚É£", "6Ô∏è‚É£"),
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 4, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 2, kind: .number),
        TokenSpec(marker: "4Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "5Ô∏è‚É£", length: 3, kind: .identifier),
      ]
    )
  }

  func testLexicalTokens() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£let 2Ô∏è‚É£x = 3Ô∏è‚É£3
        4Ô∏è‚É£var 5Ô∏è‚É£y = 6Ô∏è‚É£"test"
        7Ô∏è‚É£/* abc */ 8Ô∏è‚É£// 123
        """,
      expected: [
        // let x = 3
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 1, kind: .number),
        // var y = "test"
        TokenSpec(marker: "4Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "5Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "6Ô∏è‚É£", length: 6, kind: .string),
        // /* abc */ // 123
        TokenSpec(marker: "7Ô∏è‚É£", length: 9, kind: .comment),
        TokenSpec(marker: "8Ô∏è‚É£", length: 6, kind: .comment),
      ]
    )
  }

  func testLexicalTokensForMultiLineComments() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£let 2Ô∏è‚É£x = 3Ô∏è‚É£3 4Ô∏è‚É£/*
        5Ô∏è‚É£let x = 12
        6Ô∏è‚É£*/
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 1, kind: .number),
        // Multi-line comments are split into single-line tokens
        TokenSpec(marker: "4Ô∏è‚É£", length: 2, kind: .comment),
        TokenSpec(marker: "5Ô∏è‚É£", length: 10, kind: .comment),
        TokenSpec(marker: "6Ô∏è‚É£", length: 2, kind: .comment),
      ]
    )
  }

  func testLexicalTokensForDocComments() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£/** abc */
          2Ô∏è‚É£/// def
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 10, kind: .comment, modifiers: .documentation),
        TokenSpec(marker: "2Ô∏è‚É£", length: 7, kind: .comment, modifiers: .documentation),
      ]
    )
  }

  func testLexicalTokensForBackticks() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£var 2Ô∏è‚É£`if` = 3Ô∏è‚É£20
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 4, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 2, kind: .number),
      ]
    )

    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£let 2Ô∏è‚É£`else` = 3Ô∏è‚É£3
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 6, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 1, kind: .number),
      ]
    )

    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£let `2Ô∏è‚É£onLeft = ()
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 6, kind: .identifier),
      ]
    )

    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£let 2Ô∏è‚É£onRight` = ()
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 7, kind: .identifier),
      ]
    )
  }

  func testSemanticTokens() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£struct 2Ô∏è‚É£X {}

        3Ô∏è‚É£let 4Ô∏è‚É£x = 5Ô∏è‚É£X()
        6Ô∏è‚É£let 7Ô∏è‚É£y = 8Ô∏è‚É£x 9Ô∏è‚É£+ üîüx
        """,
      expected: [
        // struct X {}
        TokenSpec(marker: "1Ô∏è‚É£", length: 6, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        // let x = X()
        TokenSpec(marker: "3Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "4Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "5Ô∏è‚É£", length: 1, kind: .struct),
        // let y = x + x
        TokenSpec(marker: "6Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "7Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "8Ô∏è‚É£", length: 1, kind: .variable),
        TokenSpec(marker: "9Ô∏è‚É£", length: 1, kind: .operator),
        TokenSpec(marker: "üîü", length: 1, kind: .variable),
      ]
    )

    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£func 2Ô∏è‚É£a() {}
        3Ô∏è‚É£let 4Ô∏è‚É£b = {}

        5Ô∏è‚É£a()
        6Ô∏è‚É£b()
        """,
      expected: [
        // func a() {}
        TokenSpec(marker: "1Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        // let b = {}
        TokenSpec(marker: "3Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "4Ô∏è‚É£", length: 1, kind: .identifier),
        // a()
        TokenSpec(marker: "5Ô∏è‚É£", length: 1, kind: .function),
        // b()
        TokenSpec(marker: "6Ô∏è‚É£", length: 1, kind: .variable),
      ]
    )
  }

  func testSemanticTokensForProtocols() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£protocol 2Ô∏è‚É£X {}
        3Ô∏è‚É£class 4Ô∏è‚É£Y: 5Ô∏è‚É£X {}

        6Ô∏è‚É£let 7Ô∏è‚É£y: 8Ô∏è‚É£Y = 9Ô∏è‚É£X()
        """,
      expected: [
        // protocol X {}
        TokenSpec(marker: "1Ô∏è‚É£", length: 8, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        // class Y: X {}
        TokenSpec(marker: "3Ô∏è‚É£", length: 5, kind: .keyword),
        TokenSpec(marker: "4Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "5Ô∏è‚É£", length: 1, kind: .interface),
        // let y: Y = X()
        TokenSpec(marker: "6Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "7Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "8Ô∏è‚É£", length: 1, kind: .class),
        TokenSpec(marker: "9Ô∏è‚É£", length: 1, kind: .interface),
      ]
    )

    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£protocol 2Ô∏è‚É£X {}

        3Ô∏è‚É£func 4Ô∏è‚É£f<5Ô∏è‚É£T: 6Ô∏è‚É£X>() {}
        """,
      expected: [
        // protocol X {}
        TokenSpec(marker: "1Ô∏è‚É£", length: 8, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        // func f<T: X>() {}
        TokenSpec(marker: "3Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "4Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "5Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "6Ô∏è‚É£", length: 1, kind: .interface),
      ]
    )
  }

  func testSemanticTokensForFunctionSignatures() async throws {
    try await assertSemanticTokens(
      markedContents: "1Ô∏è‚É£func 2Ô∏è‚É£f(3Ô∏è‚É£x: 4Ô∏è‚É£Int, _ 5Ô∏è‚É£y: 6Ô∏è‚É£String) {}",
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 1, kind: .function),
        TokenSpec(marker: "4Ô∏è‚É£", length: 3, kind: .struct, modifiers: .defaultLibrary),
        TokenSpec(marker: "5Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "6Ô∏è‚É£", length: 6, kind: .struct, modifiers: .defaultLibrary),
      ]
    )
  }

  func testSemanticTokensForFunctionSignaturesWithEmoji() async throws {
    try await assertSemanticTokens(
      markedContents: "1Ô∏è‚É£func 2Ô∏è‚É£xüëçy() {}",
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 4, kind: .identifier),
      ]
    )
  }

  func testSemanticTokensForStaticMethods() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£class 2Ô∏è‚É£X {
          3Ô∏è‚É£static 4Ô∏è‚É£func 5Ô∏è‚É£f() {}
        }
        6Ô∏è‚É£X.7Ô∏è‚É£f()
        """,
      expected: [
        // class X
        TokenSpec(marker: "1Ô∏è‚É£", length: 5, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        // static func f() {}
        TokenSpec(marker: "3Ô∏è‚É£", length: 6, kind: .keyword),
        TokenSpec(marker: "4Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "5Ô∏è‚É£", length: 1, kind: .identifier),
        // X.f()
        TokenSpec(marker: "6Ô∏è‚É£", length: 1, kind: .class),
        TokenSpec(marker: "7Ô∏è‚É£", length: 1, kind: .method, modifiers: .static),
      ]
    )

    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£class 2Ô∏è‚É£X {
          3Ô∏è‚É£class 4Ô∏è‚É£func 5Ô∏è‚É£g() {}
        }
        6Ô∏è‚É£X.7Ô∏è‚É£g()
        """,
      expected: [
        // class X
        TokenSpec(marker: "1Ô∏è‚É£", length: 5, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        // class func g() {}
        TokenSpec(marker: "3Ô∏è‚É£", length: 5, kind: .keyword),
        TokenSpec(marker: "4Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "5Ô∏è‚É£", length: 1, kind: .identifier),
        // X.f()
        TokenSpec(marker: "6Ô∏è‚É£", length: 1, kind: .class),
        TokenSpec(marker: "7Ô∏è‚É£", length: 1, kind: .method, modifiers: .static),
      ]
    )
  }

  func testSemanticTokensForEnumMembers() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£enum 2Ô∏è‚É£Maybe<3Ô∏è‚É£T> {
          4Ô∏è‚É£case 5Ô∏è‚É£none
        }

        6Ô∏è‚É£let 7Ô∏è‚É£x = 8Ô∏è‚É£Maybe<9Ô∏è‚É£String>.üîünone
        """,
      expected: [
        // enum Maybe<T>
        TokenSpec(marker: "1Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 5, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 1, kind: .identifier),
        // case none
        TokenSpec(marker: "4Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "5Ô∏è‚É£", length: 4, kind: .identifier),
        // let x = Maybe<String>.none
        TokenSpec(marker: "6Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "7Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "8Ô∏è‚É£", length: 5, kind: .enum),
        TokenSpec(marker: "9Ô∏è‚É£", length: 6, kind: .struct, modifiers: .defaultLibrary),
        TokenSpec(marker: "üîü", length: 4, kind: .enumMember),
      ]
    )

    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£enum 2Ô∏è‚É£Maybe<3Ô∏è‚É£T> {
          4Ô∏è‚É£case 5Ô∏è‚É£some(6Ô∏è‚É£T)
        }

        7Ô∏è‚É£let 8Ô∏è‚É£y: 9Ô∏è‚É£Maybe = .üîüsome(0Ô∏è‚É£42)
        """,
      expected: [
        // enum Maybe<T>
        TokenSpec(marker: "1Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 5, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 1, kind: .identifier),
        // case some
        TokenSpec(marker: "4Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "5Ô∏è‚É£", length: 4, kind: .identifier),
        TokenSpec(marker: "6Ô∏è‚É£", length: 1, kind: .typeParameter),
        // let y: Maybe = .some(42)
        TokenSpec(marker: "7Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "8Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "9Ô∏è‚É£", length: 5, kind: .enum),
        TokenSpec(marker: "üîü", length: 4, kind: .enumMember),
        TokenSpec(marker: "0Ô∏è‚É£", length: 2, kind: .number),
      ]
    )
  }

  func testRegexSemanticTokens() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£let 2Ô∏è‚É£r = 3Ô∏è‚É£/a[bc]*/
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 8, kind: .regexp),
      ]
    )
  }

  func testOperatorDeclaration() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£infix 2Ô∏è‚É£operator 3Ô∏è‚É£?= :4Ô∏è‚É£ComparisonPrecedence
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 5, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 8, kind: .keyword),
        TokenSpec(marker: "3Ô∏è‚É£", length: 2, kind: .operator),
        TokenSpec(marker: "4Ô∏è‚É£", length: 20, kind: .identifier),
      ]
    )
  }

  func testEmptyEdit() async throws {
    let testClient = try await TestSourceKitLSPClient()
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument(
      """
      1Ô∏è‚É£l0Ô∏è‚É£et 2Ô∏è‚É£x: 3Ô∏è‚É£String = 4Ô∏è‚É£"test"
      5Ô∏è‚É£var 6Ô∏è‚É£y = 7Ô∏è‚É£123
      """,
      uri: uri
    )

    let expectedTokens = [
      TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
      TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
      TokenSpec(marker: "3Ô∏è‚É£", length: 6, kind: .struct, modifiers: .defaultLibrary),
      TokenSpec(marker: "4Ô∏è‚É£", length: 6, kind: .string),
      TokenSpec(marker: "5Ô∏è‚É£", length: 3, kind: .keyword),
      TokenSpec(marker: "6Ô∏è‚É£", length: 1, kind: .identifier),
      TokenSpec(marker: "7Ô∏è‚É£", length: 3, kind: .number),
    ]

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positions, expected: expectedTokens)

    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [TextDocumentContentChangeEvent(range: Range(positions["0Ô∏è‚É£"]), text: "")]
      )
    )

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positions, expected: expectedTokens)
  }

  func testReplaceUntilMiddleOfToken() async throws {
    let testClient = try await TestSourceKitLSPClient()
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument(
      """
      1Ô∏è‚É£var 2Ô∏è‚É£test = 3Ô∏è‚É£454Ô∏è‚É£67
      """,
      uri: uri
    )

    try await assertSemanticTokens(
      uri: uri,
      in: testClient,
      positions: positions,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 4, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 4, kind: .number),
      ]
    )

    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [TextDocumentContentChangeEvent(range: positions["3Ô∏è‚É£"]..<positions["4Ô∏è‚É£"], text: " 1")]
      )
    )

    let positionsAfterEdits = DocumentPositions(
      markedText: """
        1Ô∏è‚É£var 2Ô∏è‚É£test =  3Ô∏è‚É£167
        """
    )

    try await assertSemanticTokens(
      uri: uri,
      in: testClient,
      positions: positionsAfterEdits,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 4, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 3, kind: .number),
      ]
    )
  }

  func testReplaceUntilEndOfToken() async throws {
    let testClient = try await TestSourceKitLSPClient()
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument(
      """
      1Ô∏è‚É£fatalError2Ô∏è‚É£(3Ô∏è‚É£"xyz"4Ô∏è‚É£)
      """,
      uri: uri
    )

    try await assertSemanticTokens(
      uri: uri,
      in: testClient,
      positions: positions,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 10, kind: .function, modifiers: .defaultLibrary),
        TokenSpec(marker: "3Ô∏è‚É£", length: 5, kind: .string),
      ]
    )

    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [
          TextDocumentContentChangeEvent(
            range: positions["2Ô∏è‚É£"]..<positions["4Ô∏è‚É£"],
            text: """
              ("test"
              """
          )
        ]
      )
    )

    let positionsAfterEdits = DocumentPositions(
      markedText: """
        1Ô∏è‚É£fatalError2Ô∏è‚É£(3Ô∏è‚É£"test"4Ô∏è‚É£)
        """
    )

    try await assertSemanticTokens(
      uri: uri,
      in: testClient,
      positions: positionsAfterEdits,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 10, kind: .function, modifiers: .defaultLibrary),
        TokenSpec(marker: "3Ô∏è‚É£", length: 6, kind: .string),
      ]
    )
  }

  func testInsertSpaceBeforeToken() async throws {
    let testClient = try await TestSourceKitLSPClient()
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument(
      """
      1Ô∏è‚É£let 2Ô∏è‚É£x: 3Ô∏è‚É£String = 4Ô∏è‚É£"test"
      """,
      uri: uri
    )

    let expectedTokens = [
      TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
      TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
      TokenSpec(marker: "3Ô∏è‚É£", length: 6, kind: .struct, modifiers: .defaultLibrary),
      TokenSpec(marker: "4Ô∏è‚É£", length: 6, kind: .string),
    ]

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positions, expected: expectedTokens)

    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [TextDocumentContentChangeEvent(range: Range(positions["1Ô∏è‚É£"]), text: " ")]
      )
    )

    let positionsAfterEdits = DocumentPositions(
      markedText: """
         1Ô∏è‚É£let 2Ô∏è‚É£x: 3Ô∏è‚É£String = 4Ô∏è‚É£"test"
        """
    )

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positionsAfterEdits, expected: expectedTokens)
  }

  func testInsertSpaceAfterToken() async throws {
    let testClient = try await TestSourceKitLSPClient()
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument(
      """
      1Ô∏è‚É£var 2Ô∏è‚É£x = 3Ô∏è‚É£04Ô∏è‚É£
      """,
      uri: uri
    )

    let expectedTokens = [
      TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
      TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
      TokenSpec(marker: "3Ô∏è‚É£", length: 1, kind: .number),
    ]

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positions, expected: expectedTokens)

    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [TextDocumentContentChangeEvent(range: Range(positions["4Ô∏è‚É£"]), text: " ")]
      )
    )

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positions, expected: expectedTokens)
  }

  func testInsertNewline() async throws {
    let testClient = try await TestSourceKitLSPClient()
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument(
      """
      1Ô∏è‚É£fatalError(2Ô∏è‚É£"123")
      """,
      uri: uri
    )

    let expectedTokens = [
      TokenSpec(marker: "1Ô∏è‚É£", length: 10, kind: .function, modifiers: .defaultLibrary),
      TokenSpec(marker: "2Ô∏è‚É£", length: 5, kind: .string),
    ]

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positions, expected: expectedTokens)

    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [TextDocumentContentChangeEvent(range: Range(positions["1Ô∏è‚É£"]), text: "\n")]
      )
    )

    let positionsAfterEdit = DocumentPositions(
      markedText: """

        1Ô∏è‚É£fatalError(2Ô∏è‚É£"123")
        """
    )

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positionsAfterEdit, expected: expectedTokens)
  }

  func testRemoveNewline() async throws {
    let testClient = try await TestSourceKitLSPClient()
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument(
      """
      1Ô∏è‚É£let 2Ô∏è‚É£x =3Ô∏è‚É£
              4Ô∏è‚É£"abc"
      """,
      uri: uri
    )

    let expectedTokens = [
      TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
      TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
      TokenSpec(marker: "4Ô∏è‚É£", length: 5, kind: .string),
    ]

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positions, expected: expectedTokens)

    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [TextDocumentContentChangeEvent(range: positions["3Ô∏è‚É£"]..<positions["4Ô∏è‚É£"], text: " ")]
      )
    )

    let positionsAfterEdit = DocumentPositions(
      markedText: """
        1Ô∏è‚É£let 2Ô∏è‚É£x = 4Ô∏è‚É£"abc"
        """
    )

    try await assertSemanticTokens(uri: uri, in: testClient, positions: positionsAfterEdit, expected: expectedTokens)
  }

  func testInsertTokens() async throws {
    let testClient = try await TestSourceKitLSPClient()
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument(
      """
      1Ô∏è‚É£let 2Ô∏è‚É£x =3Ô∏è‚É£
              4Ô∏è‚É£"abc"
      """,
      uri: uri
    )

    try await assertSemanticTokens(
      uri: uri,
      in: testClient,
      positions: positions,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "4Ô∏è‚É£", length: 5, kind: .string),
      ]
    )

    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [TextDocumentContentChangeEvent(range: positions["3Ô∏è‚É£"]..<positions["4Ô∏è‚É£"], text: #" "test" + "#)]
      )
    )

    let positionsAfterEdits = DocumentPositions(
      markedText: """
        1Ô∏è‚É£let 2Ô∏è‚É£x = 3Ô∏è‚É£"test" 4Ô∏è‚É£+ 5Ô∏è‚É£"abc"
        """
    )

    try await assertSemanticTokens(
      uri: uri,
      in: testClient,
      positions: positionsAfterEdits,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 6, kind: .string),
        TokenSpec(marker: "4Ô∏è‚É£", length: 1, kind: .method, modifiers: [.defaultLibrary, .static]),
        TokenSpec(marker: "5Ô∏è‚É£", length: 5, kind: .string),
      ]
    )
  }

  func testSemanticMultiEdit() async throws {
    let testClient = try await TestSourceKitLSPClient()
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument(
      """
      1Ô∏è‚É£let 2Ô∏è‚É£x3Ô∏è‚É£ = 4Ô∏è‚É£"abc"
      5Ô∏è‚É£let 6Ô∏è‚É£y = 7Ô∏è‚É£x8Ô∏è‚É£
      """,
      uri: uri
    )

    try await assertSemanticTokens(
      uri: uri,
      in: testClient,
      positions: positions,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "4Ô∏è‚É£", length: 5, kind: .string),
        TokenSpec(marker: "5Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "6Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "7Ô∏è‚É£", length: 1, kind: .variable),
      ]
    )

    let newName = "renamed"
    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [
          TextDocumentContentChangeEvent(range: positions["2Ô∏è‚É£"]..<positions["3Ô∏è‚É£"], text: newName),
          TextDocumentContentChangeEvent(range: positions["7Ô∏è‚É£"]..<positions["8Ô∏è‚É£"], text: newName),
        ]
      )
    )

    let positionsAfterEdits = DocumentPositions(
      markedText: """
        1Ô∏è‚É£let 2Ô∏è‚É£renamed = 4Ô∏è‚É£"abc"
        5Ô∏è‚É£let 6Ô∏è‚É£y = 7Ô∏è‚É£renamed
        """
    )

    try await assertSemanticTokens(
      uri: uri,
      in: testClient,
      positions: positionsAfterEdits,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 7, kind: .identifier),
        TokenSpec(marker: "4Ô∏è‚É£", length: 5, kind: .string),
        TokenSpec(marker: "5Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "6Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "7Ô∏è‚É£", length: 7, kind: .variable),
      ]
    )
  }

  func testActor() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£actor 2Ô∏è‚É£MyActor {}

        3Ô∏è‚É£func 4Ô∏è‚É£t(5Ô∏è‚É£x: 6Ô∏è‚É£MyActor) {}
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 5, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 7, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "4Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "5Ô∏è‚É£", length: 1, kind: .function),
        TokenSpec(marker: "6Ô∏è‚É£", length: 7, kind: .actor),
      ]
    )
  }

  func testArgumentLabels() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£func 2Ô∏è‚É£foo(3Ô∏è‚É£arg: 4Ô∏è‚É£Int) {}
        5Ô∏è‚É£foo(6Ô∏è‚É£arg: 7Ô∏è‚É£1)
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 3, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 3, kind: .function),
        TokenSpec(marker: "4Ô∏è‚É£", length: 3, kind: .struct, modifiers: .defaultLibrary),
        TokenSpec(marker: "5Ô∏è‚É£", length: 3, kind: .function),
        TokenSpec(marker: "6Ô∏è‚É£", length: 3, kind: .function),
        TokenSpec(marker: "7Ô∏è‚É£", length: 1, kind: .number),
      ]
    )
  }

  func testFunctionDeclarationWithFirstAndSecondName() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£func 2Ô∏è‚É£foo(3Ô∏è‚É£arg 4Ô∏è‚É£internalName: 5Ô∏è‚É£Int) {}
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 3, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 3, kind: .function),
        TokenSpec(marker: "4Ô∏è‚É£", length: 12, kind: .identifier),
        TokenSpec(marker: "5Ô∏è‚É£", length: 3, kind: .struct, modifiers: .defaultLibrary),
      ]
    )
  }

  func testRawIdentifier() async throws {
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£func 2Ô∏è‚É£`square returns x * x`() {}
        3Ô∏è‚É£`square returns x * x`()
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 4, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 22, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 22, kind: .function),
      ]
    )
    try await assertSemanticTokens(
      markedContents: """
        1Ô∏è‚É£struct 2Ô∏è‚É£S {
          3Ô∏è‚É£static 4Ô∏è‚É£var 5Ô∏è‚É£`foo bar` = 6Ô∏è‚É£0
        }
        7Ô∏è‚É£S.8Ô∏è‚É£`foo bar`
        """,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 6, kind: .keyword),
        TokenSpec(marker: "2Ô∏è‚É£", length: 1, kind: .identifier),
        TokenSpec(marker: "3Ô∏è‚É£", length: 6, kind: .keyword),
        TokenSpec(marker: "4Ô∏è‚É£", length: 3, kind: .keyword),
        TokenSpec(marker: "5Ô∏è‚É£", length: 9, kind: .identifier),
        TokenSpec(marker: "6Ô∏è‚É£", length: 1, kind: .number),
        TokenSpec(marker: "7Ô∏è‚É£", length: 1, kind: .struct),
        TokenSpec(marker: "8Ô∏è‚É£", length: 9, kind: .property),
      ]
    )
  }

  func testClang() async throws {
    try await assertSemanticTokens(
      markedContents: """
        int 1Ô∏è‚É£main() {}
        """,
      language: .c,
      expected: [
        TokenSpec(marker: "1Ô∏è‚É£", length: 4, kind: .function, modifiers: [.declaration, .definition, .globalScope])
      ]
    )
  }

  func testImplicitCancellationOnEdit() async throws {
    let testClient = try await TestSourceKitLSPClient(
      hooks: Hooks(preHandleRequest: { request in
        if request is DocumentSemanticTokensRequest {
          while !Task.isCancelled {
            try? await Task.sleep(for: .seconds(1))
          }
        }
      })
    )
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument("1Ô∏è‚É£", uri: uri)

    let receivedSemanticTokensResponse = self.expectation(description: "Received semantic tokens response")
    testClient.send(DocumentSemanticTokensRequest(textDocument: TextDocumentIdentifier(uri))) { result in
      XCTAssertEqual(result, .failure(ResponseError.cancelled))
      receivedSemanticTokensResponse.fulfill()
    }
    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [TextDocumentContentChangeEvent(range: Range(positions["1Ô∏è‚É£"]), text: "let x = 1")]
      )
    )
    try await fulfillmentOfOrThrow(receivedSemanticTokensResponse)
  }

  func testNoImplicitCancellationOnEditIfImplicitCancellationIsDisabled() async throws {
    try SkipUnless.longTestsEnabled()

    let testClient = try await TestSourceKitLSPClient(
      options: SourceKitLSPOptions(cancelTextDocumentRequestsOnEditAndClose: false),
      hooks: Hooks(preHandleRequest: { request in
        if request is DocumentSemanticTokensRequest {
          // Sleep long enough for the edit to be handled
          try? await Task.sleep(for: .seconds(2))
        }
      })
    )
    let uri = DocumentURI(for: .swift)
    let positions = testClient.openDocument("1Ô∏è‚É£", uri: uri)

    let receivedSemanticTokensResponse = self.expectation(description: "Received semantic tokens response")
    testClient.send(DocumentSemanticTokensRequest(textDocument: TextDocumentIdentifier(uri))) { result in
      XCTAssertEqual(result, .success(DocumentSemanticTokensResponse(data: [])))
      receivedSemanticTokensResponse.fulfill()
    }
    testClient.send(
      DidChangeTextDocumentNotification(
        textDocument: VersionedTextDocumentIdentifier(uri, version: 2),
        contentChanges: [TextDocumentContentChangeEvent(range: Range(positions["1Ô∏è‚É£"]), text: "let x = 1")]
      )
    )
    try await fulfillmentOfOrThrow(receivedSemanticTokensResponse)
  }
}

fileprivate struct TokenSpec {
  let marker: String
  let length: Int
  let kind: SemanticTokenTypes
  let modifiers: SemanticTokenModifiers

  init(
    marker: String,
    length: Int,
    kind: SemanticTokenTypes,
    modifiers: SemanticTokenModifiers = []
  ) {
    self.marker = marker
    self.length = length
    self.kind = kind
    self.modifiers = modifiers
  }
}

fileprivate func assertSemanticTokens(
  markedContents: String,
  language: Language = .swift,
  range: (startMarker: String, endMarker: String)? = nil,
  expected: [TokenSpec],
  file: StaticString = #filePath,
  line: UInt = #line
) async throws {
  let testClient = try await TestSourceKitLSPClient()
  let uri = DocumentURI(for: language)
  let positions = testClient.openDocument(markedContents, uri: uri)

  let response: DocumentSemanticTokensResponse?
  if let range {
    response = try await testClient.send(
      DocumentSemanticTokensRangeRequest(
        textDocument: TextDocumentIdentifier(uri),
        range: positions[range.startMarker]..<positions[range.endMarker]
      )
    )
  } else {
    response = try await testClient.send(DocumentSemanticTokensRequest(textDocument: TextDocumentIdentifier(uri)))
  }

  let expectedTokens = expected.map {
    Token(start: positions[$0.marker], utf16length: $0.length, kind: $0.kind, modifiers: $0.modifiers)
  }
  XCTAssertEqual(
    SyntaxHighlightingTokens(lspEncodedTokens: try unwrap(response, file: file, line: line).data).tokens,
    expectedTokens,
    file: file,
    line: line
  )
}

fileprivate func assertSemanticTokens(
  uri: DocumentURI,
  in testClient: TestSourceKitLSPClient,
  positions: DocumentPositions,
  expected: [TokenSpec],
  file: StaticString = #filePath,
  line: UInt = #line
) async throws {
  let response = try await unwrap(
    testClient.send(DocumentSemanticTokensRequest(textDocument: TextDocumentIdentifier(uri))),
    file: file,
    line: line
  )
  let expectedTokens = expected.map {
    Token(start: positions[$0.marker], utf16length: $0.length, kind: $0.kind, modifiers: $0.modifiers)
  }
  XCTAssertEqual(
    SyntaxHighlightingTokens(lspEncodedTokens: response.data).tokens,
    expectedTokens,
    file: file,
    line: line
  )
}
